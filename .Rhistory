exp4 = experiments[-length(experiments)]
for(i in exp4){
rat_exp = plot_rat[plot_rat$Experiment == i,]
plot_discQ_list[[i]] = ggplot(rat_exp, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data=predict_all_byExp[predict_all_byExp$Experiment == i & predict_all_byExp$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size=1, linetype=1, color="blue2") +
scale_x_discrete(rat_exp$exp_label[1], labels = unique(rat_exp$Treat_Labels)) +
scale_y_continuous("", breaks = 1:15, expand = c(.2, .2)) +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
}
plot.new()
grid.draw(plot4_discQ <- arrangeGrob(grobs = plot_discQ_list, left="harvests per patch"))
rat_ITI = plot_rat[plot_rat$Experiment == "ITI",]
plot_discQ_ITI = ggplot(rat_ITI, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data = predict_all_byExp[predict_all_byExp$Experiment == "ITI" & predict_all_byExp$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size = 1, linetype=1, color="blue2") +
coord_cartesian(ylim = c(min(rat_ITI$mean) - 1, max(rat_ITI$mean) + 1)) +
scale_x_discrete("ITI", labels = unique(rat_exp$Treat_Labels)) +
ylab("harvests per patch") +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
plot_discQ_ITI
col
this_col = col[1]
for(i in exp4){
rat_exp = plot_rat[plot_rat$Experiment == i,]
plot_discQ_list[[i]] = ggplot(rat_exp, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data=predict_all_byExp[predict_all_byExp$Experiment == i & predict_all_byExp$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size=1, linetype=1, color="blue2") +
scale_x_discrete(rat_exp$exp_label[1], labels = unique(rat_exp$Treat_Labels)) +
scale_y_continuous("", breaks = 1:15, expand = c(.2, .2)) +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
}
plot.new()
grid.draw(plot4_discQ <- arrangeGrob(grobs = plot_discQ_list, left="harvests per patch"))
plot_discQ_list = list()
exp4 = experiments[-length(experiments)]
this_col = col[1]
for(i in exp4){
rat_exp = plot_rat[plot_rat$Experiment == i,]
plot_discQ_list[[i]] = ggplot(rat_exp, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data=predict_all_byExp[predict_all_byExp$Experiment == i & predict_all_byExp$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size=1, linetype=1, color=this_col) +
scale_x_discrete(rat_exp$exp_label[1], labels = unique(rat_exp$Treat_Labels)) +
scale_y_continuous("", breaks = 1:15, expand = c(.2, .2)) +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
}
plot.new()
grid.draw(plot4_discQ <- arrangeGrob(grobs = plot_discQ_list, left="harvests per patch"))
rat_ITI = plot_rat[plot_rat$Experiment == "ITI",]
plot_discQ_ITI = ggplot(rat_ITI, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data = predict_all_byExp[predict_all_byExp$Experiment == "ITI" & predict_all_byExp$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size = 1, linetype=1, color=this_col) +
coord_cartesian(ylim = c(min(rat_ITI$mean) - 1, max(rat_ITI$mean) + 1)) +
scale_x_discrete("ITI", labels = unique(rat_exp$Treat_Labels)) +
ylab("harvests per patch") +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
plot_discQ_ITI
plot_discQ_list = list()
exp4 = experiments[-length(experiments)]
this_col = col[2]
for(i in exp4){
rat_exp = plot_rat[plot_rat$Experiment == i,]
plot_discQ_list[[i]] = ggplot(rat_exp, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data=predict_all_byExp[predict_all_byExp$Experiment == i & predict_all_byExp$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size=1, linetype=1, color=this_col) +
scale_x_discrete(rat_exp$exp_label[1], labels = unique(rat_exp$Treat_Labels)) +
scale_y_continuous("", breaks = 1:15, expand = c(.2, .2)) +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
}
plot.new()
grid.draw(plot4_discQ <- arrangeGrob(grobs = plot_discQ_list, left="harvests per patch"))
plot_discQ_list = list()
exp4 = experiments[-length(experiments)]
this_col = col[2]
for(i in exp4){
rat_exp = plot_rat[plot_rat$Experiment == i,]
plot_discQ_list[[i]] = ggplot(rat_exp, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data=predict_all_byExp[predict_all_byExp$Experiment == i & predict_all_byExp$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size=1, linetype=1, color=this_col) +
stat_summary(data=predict_all_byExp[predict_all_byExp$Experiment == i & predict_all_byExp$model == "disc-quasi",], aes(group=model), fun.data = mean_sdl, fun.args = list(mult = 1), geom = "ribbon", color=NA, fill=this_col) +
scale_x_discrete(rat_exp$exp_label[1], labels = unique(rat_exp$Treat_Labels)) +
scale_y_continuous("", breaks = 1:15, expand = c(.2, .2)) +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
}
plot.new()
grid.draw(plot4_discQ <- arrangeGrob(grobs = plot_discQ_list, left="harvests per patch"))
predict_all_byExp
names(predict_all_byExp)
predict_all_byExp = ddply(predict_all_byExp, .(Subject, model, Experiment, Treatment), function(x) c(mean=mean(x), sd=sd(x)))
sd(0)
mean(0)
exp = c("travel time", "depletion rate", "scale", "handling time", "ITI")
predict_all_byExp = rbind(predict_mean_preDelay, predict_mean_postDelay, predict_mean_postDelayExp,
predict_mean_discExp, predict_mean_discHyp, predict_mean_discDI)
models = factor(c("pre-delay", "post-delay", "post-delay-exp", "disc-exp", "disc-hyp", "disc-DI"))
models_labels = factor(c("pre-del", "post-del", "post-del-sub", "disc-exp", "disc-hyp", "disc-quasi"))
predict_all_byExp$model = factor(predict_all_byExp$model, levels = models, labels = models_labels)
predict_all_byExp$class = factor(predict_all_byExp$model, levels = models_labels)
levels(predict_all_byExp$class) = c("time", "time", "time", "disc", "disc", "disc")
plot_rat$exp_label = factor(plot_rat$Experiment, levels = experiments, labels = exp)
predict_all_byExp_mean = ddply(predict_all_byExp, .(Subject, model, Experiment, Treatment), function(x) c(mean=mean(x$mean)))
predict_all_byExp_mean
plot_discQ_list = list()
exp4 = experiments[-length(experiments)]
this_col = col[2]
for(i in exp4){
rat_exp = plot_rat[plot_rat$Experiment == i,]
plot_discQ_list[[i]] = ggplot(rat_exp, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data=predict_all_byExp_mean[predict_all_byExp_mean$Experiment == i & predict_all_byExp_mean$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size=1, linetype=1, color=this_col) +
stat_summary(data=predict_all_byExp_mean[predict_all_byExp_mean$Experiment == i & predict_all_byExp_mean$model == "disc-quasi",], aes(group=model), fun.data = mean_sdl, fun.args = list(mult = 1), geom = "ribbon", color=NA, fill=this_col, alpha=.5) +
scale_x_discrete(rat_exp$exp_label[1], labels = unique(rat_exp$Treat_Labels)) +
scale_y_continuous("", breaks = 1:15, expand = c(.2, .2)) +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
}
plot.new()
grid.draw(plot4_discQ <- arrangeGrob(grobs = plot_discQ_list, left="harvests per patch"))
rat_ITI = plot_rat[plot_rat$Experiment == "ITI",]
plot_discQ_ITI = ggplot(rat_ITI, aes(x = Treatment, y = mean)) +
stat_summary(fun.y = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = .35) +
stat_summary(data=predict_all_byExp_mean[predict_all_byExp_mean$Experiment == "ITI" & predict_all_byExp_mean$model == "disc-quasi",], aes(group=model), fun.y = mean, geom = "line", size=1, linetype=1, color=this_col) +
stat_summary(data=predict_all_byExp_mean[predict_all_byExp_mean$Experiment == "ITI" & predict_all_byExp_mean$model == "disc-quasi",], aes(group=model), fun.data = mean_sdl, fun.args = list(mult = 1), geom = "ribbon", color=NA, fill=this_col, alpha=.5) +
coord_cartesian(ylim = c(min(rat_ITI$mean) - 1, max(rat_ITI$mean) + 1)) +
scale_x_discrete("ITI", labels = unique(rat_exp$Treat_Labels)) +
ylab("harvests per patch") +
scale_color_manual("", values = col[1:3]) +
theme_Gary()
plot_discQ_ITI
fn_plot4_discQ = paste(path, "Projects/AGT/Forage_Overharvest/Analysis/Final/figs/foraging_modelPredict4_discQ.svg", sep = "")
ggsave(fn_plot4_discQ, plot4_discQ, device = "svg", width = 6, height = 4)
### save figures ------------------------
dir = paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/figs")
dir
### save figures ------------------------
dir = file.path(dirname(rstudioapi::getActiveDocumentContext()$path), "/figs")
dir
### save figures ------------------------
dir = file.path(dirname(rstudioapi::getActiveDocumentContext()$path), "figs")
file.path
### save figures ------------------------
save_dir = file.path(dirname(rstudioapi::getActiveDocumentContext()$path), "figs")
### save figures ------------------------
save_dir = file.path(dirname(rstudioapi::getActiveDocumentContext()$path), "figs")
fn_plot4_discQ = file.path(save_dir, "forage_models_plot4_discQ.svg")
plot4_discQ
fn_plot4_discQ = file.path(save_dir, "forage_models_plot4_discQ.svg")
ggsave(fn_plot4_discQ, plot4_discQ, device = "svg", width = 6, height = 4)
no_legend(plot_discQ_ITI)
plot_discQ_ITI
fn_iti_discQ = file.path(save_dir, "forage_models_iti_discQ.svg")
ggsave(fn_iti_discQ, plot_discQ_ITI, device = "svg", width = 2.25, height = 2)
ggsave(fn_plot4_discQ, plot4_discQ, device = "svg", width = 5.5, height = 4)
fn_plot4_discQ = file.path(save_dir, "forage_models_plot4_discQ.svg")
ggsave(fn_plot4_discQ, plot4_discQ, device = "svg", width = 5, height = 4)
fn_iti_discQ = file.path(save_dir, "forage_models_iti_discQ.svg")
ggsave(fn_iti_discQ, plot_discQ_ITI, device = "svg", width = 2.5, height = 2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("res/itc_models_fit.Rdata")
library(rextras)
library(Hmisc)
library(grid)
library(RColorBrewer)
library(plyr)
library(data.table)
dMean = dFree[, .(pLL = mean(chooseLL)), .(Subject, Condition, LL_reward, LL_delay)]
predict_discDI_DD = setDT(predict_discDI_DD)
predict_discDI_DD_mean = predict_discDI_DD[, .(pLL = mean(model_pLL)), .(Subject, Condition, LL_reward, LL_delay)]
facet_labels = c(constITI = "const delay", constTrial = "const rate")
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
theme_abw()
plot_discDI_DD
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 2.667, height = 2)
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 4, height = 2)
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 4, height = 2.5)
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
coord_cartesian(ylim=c(.2,.85))
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
coord_cartesian(ylim=c(.2,.85)) +
theme_abw()
plot_discDI_DD
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
coord_cartesian(ylim=c(.35,.85)) +
theme_abw()
plot_discDI_DD
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 3.5, height = 2.5)
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 4, height = 2.5)
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 4.5, height = 3.25)
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 4.5, height = 2.75)
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward), fill=factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
stat_summary(data = predict_discDI_DD_mean, fun.data = mean_se, geom = "ribbon", color=NA, alpha=.5) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
coord_cartesian(ylim=c(.35,.85)) +
theme_abw()
plot_discDI_DD
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward), fill=factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
stat_summary(data = predict_discDI_DD_mean, fun.data = mean_se, geom = "ribbon", color=NA, alpha=.5) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
scale_fill_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
coord_cartesian(ylim=c(.35,.85)) +
theme_abw()
plot_discDI_DD
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward), fill=factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
stat_summary(data = predict_discDI_DD_mean, fun.data = mean_se, geom = "ribbon", color=NA, alpha=.5) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
scale_fill_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
guide_legend(fill=F) +
coord_cartesian(ylim=c(.35,.85)) +
theme_abw()
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward), fill=factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
stat_summary(data = predict_discDI_DD_mean, fun.data = mean_se, geom = "ribbon", color=NA, alpha=.5) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
scale_fill_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
guide_legend(fill=NA) +
coord_cartesian(ylim=c(.35,.85)) +
theme_abw()
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward), fill=factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
stat_summary(data = predict_discDI_DD_mean, fun.data = mean_se, geom = "ribbon", color=NA, alpha=.5) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
scale_fill_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL"), legend=F) +
#guide_legend(fill=NA) +
coord_cartesian(ylim=c(.35,.85)) +
theme_abw()
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward), fill=factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
stat_summary(data = predict_discDI_DD_mean, fun.data = mean_se, geom = "ribbon", color=NA, alpha=.5) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
scale_fill_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL"), guide='none') +
#guide_legend(fill=NA) +
coord_cartesian(ylim=c(.35,.85)) +
theme_abw()
plot_discDI_DD
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 4.5, height = 2.75)
plot_discDI_DD = ggplot(dMean, aes(x = LL_delay, y = pLL, color = factor(LL_reward), fill=factor(LL_reward))) +
facet_wrap(~Condition, labeller = labeller(Condition = facet_labels)) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = .35) +
stat_summary(data = predict_discDI_DD_mean, fun.y = mean, geom = "line", size = 1) +
stat_summary(data = predict_discDI_DD_mean, fun.data = mean_se, geom = "ribbon", color=NA, alpha=.35) +
scale_x_continuous("LL delay", c(1,2,4,6)) +
scale_y_continuous("p(choose LL)", seq(0,1,.2), lim = c(0, 1)) +
scale_color_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
scale_fill_brewer("LL reward", palette = "Set1", labels = c("40uL", "80uL", "120uL"), guide='none') +
#guide_legend(fill=NA) +
coord_cartesian(ylim=c(.35,.85)) +
theme_abw()
plot_discDI_DD
ggsave("figs/itc_model_behavior.svg", plot_discDI_DD, device = "svg", width = 4.5, height = 2.75)
setwd("/Volumes/gould/Archive/Old lab members/Gary/Projects/AGT/Forage_Overharvest/Analysis/Final_eLife")
library(data.table)
dAll = fread(file.choose()) # select itcDat.csv
dAll[ForceFree==1, .N, c("Subject", "Condition")]
pLL = function(d) c(chooseLL = (sum(d$chooseLL) / length(d$chooseLL)), nChoices = length(d$chooseLL))
pLL = function(d) c(chooseLL = (sum(d$chooseLL) / length(d$chooseLL)), nChoices = length(d$chooseLL))
dFree = subset(dAll, ForceFree == 1) # subset only free choice trials
dSum_Free = ddply(dFree, .(Subject, Condition, LL_reward, LL_delay), pLL) # get p(choose LL) for each subject and condition
library(plyr)
dSum_Free = ddply(dFree, .(Subject, Condition, LL_reward, LL_delay), pLL) # get p(choose LL) for each subject and condition
### two facet plot
dSum_Free$Condition_label = factor(dSum_Free$Condition, levels = c("constITI", "constTrial"), labels = c("const delay", "const rate"))
plot_behavior = ggplot(dSum_Free, aes(x = LL_delay, y = chooseLL, color = factor(LL_reward), group = factor(LL_reward))) +
facet_wrap(~ Condition_label) +
stat_summary(fun.y = mean, geom = "point", size = 2) +
stat_summary(fun.data = mean_se, geom = "errorbar", linetype = 1, width = .15) +
stat_summary(fun.y = mean, geom = "line", size = 1) +
expand_limits(y = c(0,1)) +
scale_x_continuous("LL Delay", breaks = c(1, 2, 4, 6)) +
labs(y = "p(choose LL)") +
scale_color_brewer("LL Reward", palette = "Set1", labels = c("40uL", "80uL", "120uL")) +
theme_abw()
dAll = fread(file.choose()) # select itcDat.csv
dAll
dFree = dAll[ForceFree==1] # subset only free choice trials
# print number of free choice trials per subject per condition
dFree[, .N, c("Subject", "Condition")]
dFreeLM = copy(dFree)
toScale = c("LL_reward", "LL_delay")
for(i in toScale) dFreeLM[, c(i) := scale(get(i))]
# scale continuous predictor variables: LL reward and LL delay
dFreeLM = copy(dFree)
toScale = c("LL_reward", "LL_delay")
for(i in toScale) dFreeLM[, c(i) := scale(get(i))]
# fun logistic regression on choices
choiceLM = glmer(data=dFreeLM, chooseLL ~ LL_reward*LL_delay*Condition + (LL_reward+LL_delay+Condition || Subject),
family=binomial, nAGQ=0, control=glmerControl(optCtrl=list(maxfun=100000, iprint=1000)))
library(lmerTest)
# fun logistic regression on choices
choiceLM = glmer(data=dFreeLM, chooseLL ~ LL_reward*LL_delay*Condition + (LL_reward+LL_delay+Condition || Subject),
family=binomial, nAGQ=0, control=glmerControl(optCtrl=list(maxfun=100000, iprint=1000)))
isSingular(choiceLM)
summary(choiceLM)
interactionMeans(choiceLM, slope="LL_reward")
library(phia)
interactionMeans(choiceLM, slope="LL_reward")
testInteractions(choiceLM, fixed="Condition", slope="LL_reward")
interactionMeans(choiceLM, slope="LL_delay")
testInteractions(choiceLM, fixed="Condition", slope="LL_delay")
interactionMeans(choiceLM, pairwise="Condition", slope="LL_delay")
testInteractions(choiceLM, pairwise="Condition", slope="LL_delay")
library(data.table)
dAll = fread(file.choose()) # select itcDat.csv
dAll
dFree = dAll[ForceFree==1] # subset only free choice trials
# print number of free choice trials per subject per condition
dFree[, .N, c("Subject", "Condition")]
library(lmerTest)
library(phia)
# scale continuous predictor variables: LL reward and LL delay
dFreeLM = copy(dFree)
toScale = c("LL_reward", "LL_delay")
for(i in toScale) dFreeLM[, c(i) := scale(get(i))]
# fun logistic regression on choices (may take a minute...)
choiceLM = glmer(data=dFreeLM, chooseLL ~ LL_reward*LL_delay*Condition + (LL_reward+LL_delay+Condition || Subject),
family=binomial, nAGQ=0, control=glmerControl(optCtrl=list(maxfun=100000, iprint=1000)))
summary(choiceLM)
interactionMeans(choiceLM, slope="LL_reward")
testInteractions(choiceLM, fixed="Condition", slope="LL_reward")
interactionMeans(choiceLM, slope="LL_delay")
testInteractions(choiceLM, fixed="Condition", slope="LL_delay")
interactionMeans(choiceLM, pairwise="Condition", slope="LL_delay")
testInteractions(choiceLM, pairwise="Condition", slope="LL_delay")
rddm0::sim_ddm(10, 1, 2, .3, n_threads=2)
rddm0::sim_ddm(10, 1, 2, .3, n_threads=2)
rddm0::sim_ddm(10, 1, 2, .3, n_threads=2)
rddm0::sim_ddm(10, 1, 2, .3, n_threads=2)
rddm0::sim_ddm(10, 1, 2, .3, n_threads=2)
system.time(rddm0::sim_ddm(1000, 1, 2, .3, n_threads=2))
system.time(rddm0::sim_ddm(1000, 1, 2, .3, n_threads=2))
system.time(rddm0::sim_ddm(1000, 1, 2, .3, n_threads=4))
setwd("~/Desktop/r_packages/rddm0")
Rcpp::compileAttributes()
devtools::document()
v
a
t0
z
sv
st0
sz
a_prime
kappa
tc
s
sv_points
sz_points
st0_points
dt
max_time
bounds_function
n_threads
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
